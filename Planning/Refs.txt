Position and 1stInputByteAssociatedWithOutput are listed relative to beginning of the compression block.
1stOccur and Opos are listed relative to the beginning of the output image data.
Want to get Position relative to output data, too.
1IAWO = 1st Input Byte Associated With Targeted Output
Pos	Opos	inRef	Output	1stOccur	1st-P	IAWO	P-IAWO	Op-1st
1A	EB	[10 00]	88 88 8A	28	E	7	13	C3 (So 10 means C2...? Well, just in case, element 5 or 6 (if you include the "don't exceed this value" first entry) in the header list is C4.)
1D	EE	[05 00]	8A 8A C7	E8	CB	17	6	6
25	F7	[01 00]	C9 C9 C9	F5	D0	23	2	2
29	FB	[08 70]	87 87 87 C9 C9 C9 C9 C9 C9 87	F2	C9	20	9	9
3B	1AD	[2C 00]	C7 C7 8A	E6	AB	15	26	C7 (So 2C is C6... so is 20 = BA? Why would that be less than a Ref lower byte of 0x10?)
3E	1B1	[40 00]	C5 C5 C5	24	-1A	3	3B	18D (So 40 means 18C...? There's nothing closer than 185 in the header list, index 6 or 7. So I'd say this doesn't really mean to look up a value in the header list...)
41	1B5	[0A 10]	88 8A C7 C7	1AA	169	37	A	B
44	1BA	[25 10] C9 87 87 87	FA					C0
46	1BE	[2F 40] 87 C9 C9 C9 C9 C9 C9	FD					C1 (So, um, 25 2F 2C => C0 C1 C7?)
49	1C5	[05 40] C9 C9 C9 C9 C9 C9 C9	1BF					6
4B	1CC	[3C 20] C9 C9 C9 C9 C9	F5					D7
4D	1D1	[15 10] 87 87 87 87	1B8*					19
4F	1D5	[49 30] 8D 87 87 87 C9 C9	F1					E4
51	1DB	[1F 10]	87 87 87 87	1B8* (identical output, different input)				23 (15 and 1F are 0xA apart, and their Opos is 0xA apart. So in both cases Opos-[lower byte] yields 1BC...)
5E	271	[76 10]	C5 88 88 88	26				24B
61	275	[11 30]	87 87 87 87 87 87	1DB				9A
6E	285	[01 00]	E5 E5 E5	283		6C		2
7C	293	[01 00]	E5 87 E5	291		7A		2
7F	296	[4E E0]	C9*17	1BF				D7 *Not sure about this, but it seems like it has a special flag set to repeat or something
81	2A7	[91 00]	87 87 C9	F3	72	21	60	1B4
86	2AC	[98 10]	87 87 87 C9	F2	6C	20	66	1BA
8D	2B4	[80 00]	C7 C7 C7	1AC				108
93	334	[C0 00]	88 88 88	27				30D
98	339	[42 00]	88 8D 8D	27E				BB
9C	33E	[40 10]	E5 E5 E5 BF	285				B9
9F	343	[05 00]	81 E5 E5	33D	29E	9B	4	6
CF	36E	[DE 20] C9 C9 C9 C9 C9	F5				279
D2	373	[5C 70]	C9 C9 C9 C9 C9 C9 C9 C9 87 87	1C9				1AA
D4	37D	[90 40]	87 87 87 87 87 87 87	275				108
D6	384	[F5 30]	C9 C9 C9 C9 C9 C9	F5* (First byte and offset from 0 match)				28F
--It was around this time that I noticed (secondByte & 0xF)+3 is the count of pixels to copy.
DD	3FC	[1D 01] C5 C5 88	25				3D7
113	42D	[69 10]	00 00 00 00	00 (though it may not consider ZeroSeries)				42D?
117	433	[79 00]	E5 F1 E5	34C				E7
124	43F	[13 F1]	C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 (that's 18 of 'em)	1BF				280
126	451	[6D 90]	C9 C9 C9 C9 C9 87 87 87 87 87 87 87 (12 bytes)	376				DB
12C	4C4?	[C0 10]	?? 88 88 88	27?				
(This is the first ref that terminates a ZeroSeries. The ZeroCount plus the 4 this generates make 1 too many output bytes. Not sure which end to discard, but I can figure that out after I understand the reference system.)
131	4CA	[FF 00]	E5 E5 E5	283	(Appears at 33E and 283/284/285)
138	4D1	[58 00]	E0 EE E4	416	(Also appears at 18DE)
162	4F7	[D2 00]	E5 00 00	355
164	4FA	[C8 00]	BF E5 F0	362
16F	504	[E0 10]	E5 00 00 00	355
17A	510	[7D 00]	F0 81 E5	431
17F	516	[DA 30]	F9 C9 C9 C9 C9 C9	36D
182	51C	[D7 B0]	C9 C9 C9 C9 C9 C9 87 87 87 87 87 87 87 87 (14 bytes)
188	58C?	[2C 11]	?? 88 88 88	27?
(Like earlier, this ref is a ZeroSeries terminator, too, so it generates one too many bytes.)
18D	591	[CA 00]	E4 EB EB	
1A1	5A4	[0E 00]	E5 E5 E1	(Yes, E5 E5 E1 appears 0xE+1 output bytes prior to 0x1A1. And that is the first appearance.)
1D5	5D3	[6B 01]	81 E5 E5	
1DC	5DA	[7E 00]	F9 EB E5	
1ED	5EA	[46 71]	C9 C9 C9 87 87 87 87 87 87 87	
1EF	5F4	[19 12]	88 C5 C5 C5	
1F6	655	[DC 01] C5 88 8D
24D	6A3	[B7 00]	EB E5 E5	
262	6B7	[A9 12]	8D 87 87 87	
265	6BB	[E1 30]	87 87 87 87 87 88	
267	6C1	[CB 02]	88 88 88	27

I've tried treating the data, other than the length, as block offset, current output position offset, index in the header list, multiplier...nothing makes sense.
Adding amounts as you pass thresholds (the header list) doesn't make sense either. 0C 00 00 00 is just too small a value for anything to make sense. Plus, since they don't align with compressed or decompressed row data, why does the count roughly match the number of rows?
When the upper two nibbles of the non-length portion are 0s, the lowest is an exact count (but add one), so maybe that data is separate.
Does the header list have to do with compressed bytes excluding MagicBytes? Or the "units" in the compressed data?
Ordered list is not proportional to file length, but ms_quit_0 and ms_quit_2 (which differ in length by 1 byte) have the same list. ms_quit_1 (shorter) has a list with smaller numbers. creditsbtn_return_0 has a shorter list and bigger early numbers and is a little bit shorter than ms_quit_2.

Next I want to list just the ZeroSeries and their terminators.
(last nibble value is the distance to the next ZeroSeries, excluding MagicBytes? Nope. There's still too much space...)

(EPos = End Position (position of last byte in the ZeroSeries). OToNext = next Pos minus this EPos)
Pos	EPos	OToNext	ZeroSeries	LastByteAnd0x3F
1			<24 47>	7	2
B			<3F 3F 21 19 42>	2
13			<01 65>	25
32			<3F 3F 0B 16 77>	37
55			<3F {80 MagicByte} 3E 0F 7F>	3F
85			<4B>	B
8F			<3F 32 0C 7F>	3F
D1			<57>	17
D8			<3F 29 0A {02 MagicByte} 7F>	3F
11F			<62>	22
129			<3F 20 08 [C0 10]>	[C0 10] returns 7F as its first char
185			<3F 1C 06 [2C 11]>	[2C 11] returns 7F as its first char
1CB			<6D>	2D
1F1			<3F 19 05 7F>	3F
23B			<71>	31
26A			<3F 16 05 7F>	3F
2B2			<75>	35
